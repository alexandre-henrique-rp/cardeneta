/**
 * Servi√ßo de Push Notification
 * Gerencia o registro e cancelamento de subscri√ß√µes de notifica√ß√µes push
 */

/**
 * Converte uma chave VAPID de base64 para Uint8Array
 * @param base64String - Chave VAPID em formato base64
 * @returns Uint8Array da chave
 */
function urlBase64ToUint8Array(base64String: string): Uint8Array {
  const padding = '='.repeat((4 - (base64String.length % 4)) % 4)
  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/')

  const rawData = window.atob(base64)
  const outputArray = new Uint8Array(rawData.length)

  for (let i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i)
  }
  return outputArray
}

/**
 * Verifica se o navegador suporta notifica√ß√µes push
 * @returns true se suporta, false caso contr√°rio
 */
export function isPushNotificationSupported(): boolean {
  return 'serviceWorker' in navigator && 'PushManager' in window
}

/**
 * Solicita permiss√£o para enviar notifica√ß√µes
 * @returns Promise com o resultado da permiss√£o
 */
export async function requestNotificationPermission(): Promise<NotificationPermission> {
  if (!('Notification' in window)) {
    console.warn('Este navegador n√£o suporta notifica√ß√µes')
    return 'denied'
  }

  return await Notification.requestPermission()
}

/**
 * Registra uma subscri√ß√£o de push notification
 * @param vapidPublicKey - Chave p√∫blica VAPID do servidor
 * @returns Objeto com os dados da subscri√ß√£o ou null se falhar
 */
export async function registerPushSubscription(
  vapidPublicKey: string
): Promise<{
  endpoint: string
  p256dh: string
  auth: string
  userAgent: string
} | null> {
  try {
    // Verificar se o navegador suporta
    if (!isPushNotificationSupported()) {
      console.warn('Push notifications n√£o s√£o suportadas neste navegador')
      return null
    }

    // Solicitar permiss√£o
    const permission = await requestNotificationPermission()
    if (permission !== 'granted') {
      console.warn('Permiss√£o para notifica√ß√µes negada')
      return null
    }

    // Aguardar o Service Worker estar pronto e ativo
    console.log('‚è≥ Aguardando Service Worker estar pronto...')
    const registration = await navigator.serviceWorker.ready

    // Verificar se o SW est√° realmente ativo
    if (!registration.active) {
      console.error('‚ùå Service Worker n√£o est√° ativo')
      throw new Error('Service Worker n√£o est√° ativo. Recarregue a p√°gina.')
    }

    console.log('‚úÖ Service Worker ativo:', registration.active.state)

    // Aguardar um pouco para garantir que o SW est√° completamente pronto
    if (registration.active.state === 'activating') {
      console.log('‚è≥ Service Worker est√° ativando... aguardando...')
      await new Promise(resolve => {
        registration.active?.addEventListener('statechange', function listener(e) {
          if ((e.target as ServiceWorker).state === 'activated') {
            registration.active?.removeEventListener('statechange', listener)
            resolve(null)
          }
        })
        // Timeout de seguran√ßa
        setTimeout(resolve, 2000)
      })
    }

    // Verificar se j√° existe uma subscri√ß√£o
    let subscription = await registration.pushManager.getSubscription()

    // Se n√£o existir, criar uma nova
    if (!subscription) {
      console.log('üìù Criando nova subscri√ß√£o push...')
      console.log('üîë Chave VAPID recebida:', vapidPublicKey)
      console.log('üîë Tamanho da chave:', vapidPublicKey.length, 'caracteres')

      const convertedVapidKey = urlBase64ToUint8Array(vapidPublicKey)
      console.log('üîë Chave convertida:', convertedVapidKey)
      console.log('üîë Tamanho convertido:', convertedVapidKey.length, 'bytes (esperado: 65)')

      if (convertedVapidKey.length !== 65) {
        console.error('‚ùå Chave VAPID tem tamanho incorreto! Esperado: 65 bytes, Recebido:', convertedVapidKey.length)
        throw new Error(`Chave VAPID inv√°lida. Tamanho: ${convertedVapidKey.length} bytes (esperado: 65)`)
      }

      subscription = await registration.pushManager.subscribe({
        userVisibleOnly: true,
        applicationServerKey: convertedVapidKey as BufferSource,
      })
      console.log('‚úÖ Subscri√ß√£o criada com sucesso!')
    } else {
      console.log('‚ÑπÔ∏è Subscri√ß√£o j√° existe')
    }

    // Extrair as chaves da subscri√ß√£o
    const key = subscription.getKey('p256dh')
    const auth = subscription.getKey('auth')

    if (!key || !auth) {
      throw new Error('N√£o foi poss√≠vel obter as chaves da subscri√ß√£o')
    }

    // Converter para base64
    const p256dh = btoa(String.fromCharCode(...new Uint8Array(key)))
    const authKey = btoa(String.fromCharCode(...new Uint8Array(auth)))

    return {
      endpoint: subscription.endpoint,
      p256dh,
      auth: authKey,
      userAgent: navigator.userAgent,
    }
  } catch (error) {
    console.error('Erro ao registrar subscri√ß√£o de push:', error)
    return null
  }
}

/**
 * Cancela a subscri√ß√£o de push notification
 * @returns true se cancelou com sucesso, false caso contr√°rio
 */
export async function unregisterPushSubscription(): Promise<boolean> {
  try {
    if (!isPushNotificationSupported()) {
      return false
    }

    const registration = await navigator.serviceWorker.ready
    const subscription = await registration.pushManager.getSubscription()

    if (subscription) {
      await subscription.unsubscribe()
      return true
    }

    return false
  } catch (error) {
    console.error('Erro ao cancelar subscri√ß√£o de push:', error)
    return false
  }
}

/**
 * Verifica se o usu√°rio j√° tem uma subscri√ß√£o ativa
 * @returns true se tem subscri√ß√£o, false caso contr√°rio
 */
export async function hasActiveSubscription(): Promise<boolean> {
  try {
    if (!isPushNotificationSupported()) {
      return false
    }

    const registration = await navigator.serviceWorker.ready
    const subscription = await registration.pushManager.getSubscription()

    return subscription !== null
  } catch (error) {
    console.error('Erro ao verificar subscri√ß√£o:', error)
    return false
  }
}
