#!/bin/bash

# Script de teste para Push Notifications
# Testa todo o fluxo de push notifications

echo "=========================================="
echo "üîî Teste de Push Notifications"
echo "=========================================="
echo ""

# Cores para output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# URL do backend
BACKEND_URL="${1:-http://localhost:3000}"
echo "Backend URL: $BACKEND_URL"
echo ""

# 1. Verificar se o backend est√° rodando
echo "1Ô∏è‚É£  Verificando se o backend est√° rodando..."
if curl -s -f "$BACKEND_URL" > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Backend est√° rodando${NC}"
else
    echo -e "${RED}‚ùå Backend n√£o est√° respondendo em $BACKEND_URL${NC}"
    echo "Execute: cd backend && npm run start:dev"
    exit 1
fi
echo ""

# 2. Obter chave VAPID p√∫blica
echo "2Ô∏è‚É£  Obtendo chave VAPID p√∫blica..."
VAPID_KEY=$(curl -s "$BACKEND_URL/push-notification/vapid-public-key")
if [ -n "$VAPID_KEY" ]; then
    echo -e "${GREEN}‚úÖ Chave VAPID obtida:${NC} ${VAPID_KEY:0:30}..."
else
    echo -e "${RED}‚ùå Falha ao obter chave VAPID${NC}"
    exit 1
fi
echo ""

# 3. Verificar quantas subscri√ß√µes existem no banco
echo "3Ô∏è‚É£  Verificando subscri√ß√µes no banco de dados..."
echo "Execute no Prisma Studio ou no banco:"
echo "SELECT COUNT(*) FROM PushSubscription;"
echo ""

# 4. Enviar notifica√ß√£o de teste
echo "4Ô∏è‚É£  Enviando notifica√ß√£o de teste..."
RESPONSE=$(curl -s -X POST "$BACKEND_URL/push-notification/test" \
  -H "Content-Type: application/json" \
  -d '{
    "title": "üß™ Teste de Notifica√ß√£o",
    "message": "Se voc√™ recebeu esta notifica√ß√£o, est√° funcionando! üéâ"
  }')

echo "$RESPONSE" | jq '.' 2>/dev/null || echo "$RESPONSE"
echo ""

# 5. Verificar resultado
SUCCESS=$(echo "$RESPONSE" | jq -r '.success' 2>/dev/null)
SENT=$(echo "$RESPONSE" | jq -r '.sent' 2>/dev/null)
FAILED=$(echo "$RESPONSE" | jq -r '.failed' 2>/dev/null)
TOTAL=$(echo "$RESPONSE" | jq -r '.total' 2>/dev/null)

echo ""
echo "=========================================="
echo "üìä RESULTADO DO TESTE"
echo "=========================================="

if [ "$SUCCESS" = "true" ]; then
    echo -e "${GREEN}‚úÖ Notifica√ß√µes enviadas com sucesso!${NC}"
    echo "   Total de subscri√ß√µes: $TOTAL"
    echo "   Enviadas: $SENT"
    echo "   Falhas: $FAILED"
else
    echo -e "${RED}‚ùå Falha ao enviar notifica√ß√µes${NC}"
    if [ "$TOTAL" = "0" ]; then
        echo ""
        echo -e "${YELLOW}‚ö†Ô∏è  Nenhuma subscri√ß√£o encontrada!${NC}"
        echo ""
        echo "Poss√≠veis causas:"
        echo "  1. Usu√°rio n√£o fez subscri√ß√£o no frontend"
        echo "  2. Service Worker n√£o est√° registrado"
        echo "  3. Permiss√£o de notifica√ß√µes n√£o foi concedida"
        echo ""
        echo "Solu√ß√µes:"
        echo "  1. Abra o frontend em: http://localhost:3001"
        echo "  2. Abra o console do navegador (F12)"
        echo "  3. Use o hook usePushNotification para fazer subscribe"
        echo "  4. Ou acesse: http://localhost:3001/test-push.html"
    fi
fi

echo ""
echo "=========================================="
echo "üîß PR√ìXIMOS PASSOS"
echo "=========================================="
echo ""
echo "1. Verifique se o service worker est√° ativo:"
echo "   - Abra DevTools ‚Üí Application ‚Üí Service Workers"
echo ""
echo "2. Verifique os logs do navegador:"
echo "   - Abra Console (F12)"
echo "   - Procure por '[Service Worker]' ou '[usePushNotification]'"
echo ""
echo "3. Teste manualmente:"
echo "   - Acesse: http://localhost:3001/test-push.html"
echo "   - Siga os passos na p√°gina"
echo ""
echo "4. Verifique logs do backend:"
echo "   - Procure por '[PushNotificationService]' nos logs"
echo ""
